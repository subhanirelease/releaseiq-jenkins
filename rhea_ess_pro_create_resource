   pipeline {
  environment {
    EMAIL_TO = ' subhani.s@releaseiq.io'
    AUTOMATION_DIR='build/automation'
    USER_NAME="tsubhanishaik86@gmail.com"
    App="app.txt"
    unique_Id = UUID.randomUUID().toString()
	unique_ID1 = UUID.randomUUID().toString()
  }
  agent {
    kubernetes {
      //Cloud Kubernetes
      yaml """
      kind: Pod
      metadata:
        name: kaniko
      spec:
        containers:
        - name: awscli
          image: amazon/aws-cli
          imagePullPolicy: IfNotPresent
          command:
          -  cat
          tty: true
        - name: curl
          image: docker.io/gempesaw/curl-jq:latest
          imagePullPolicy: IfNotPresent
          command:
          -  cat
          tty: true
        - name: kaniko
          image: gcr.io/kaniko-project/executor:debug-539ddefcae3fd6b411a95982a830d987f4214251
          imagePullPolicy: IfNotPresent
          command:
          - cat
          tty: true
          volumeMounts:
            - name: docker-config
              mountPath: /kaniko/.docker
        volumes:
          - name: docker-config
            configMap:
              name: docker-config
      """
    }
  }
    stages{
	 
      stage('AWS SERVICES') {
          steps {
			container(name: 'curl') {
			checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/riqio/riq-jenkins-pipeline-jobs.git']]])
               sh '''
               	echo "$ID"
		cd $AUTOMATION_DIR
		ls -l
		cat token.json
		token=$( curl --header 'Content-type: application/json' --request POST -d @./token1.json https://prod.api.releaseiq.io/cm/api/authenticate-client | cut -d '"' -f6)
		echo $token
		echo 'token="'"$token"'"' > $WORKSPACE/token.txt
		cat $WORKSPACE/token.txt
	    curl -H 'Accept: application/json' -H "Authorization: Bearer ${token}" -X PUT  "http://prod.api.releaseiq.io/cm/approvenewcustomer/$ID/1"
        curl -H 'Accept: application/json' -H "Authorization: Bearer ${token}" https://prod.api.releaseiq.io/cm/getnewcustomer/$ID/1 | tee sample.txt
        cat $WORKSPACE/$AUTOMATION_DIR/sample.txt
        cat $WORKSPACE/$AUTOMATION_DIR/sample.txt | awk ' BEGIN {FS=":";RS=","};
 {
{print toupper($1), $2}
}'| sed 's/{//g;s/}/ /;s/ /=/;s/"//g;s/^SIZE.*//;s/CREATED_ON.*//;s/UPDATED_ON.*//;s/ADDRESS1=/ADDRESS1="/;s/\\(ADDRESS1.*\\)/\\1"/;s/ACCOUNTNAME=/ACCOUNTNAME="/;s/\\(ACCOUNTNAME.*\\)/\\1"/;s/CUSTOMERNAME=/CUSTOMERNAME="/;s/\\(CUSTOMERNAME.*\\)/\\1"/;s/STATE=/STATE="/;s/\\(STATE.*\\)/\\1"/;s/COUNTRY=/COUNTRY="/;s/\\(COUNTRY.*\\)/\\1"/;s/CITY=/CITY="/;s/\\(CITY.*\\)/\\1"/;s/FIRSTNAME=/FIRSTNAME="/;s/\\(FIRSTNAME.*\\)/\\1"/;s/LASTNAME=/LASTNAME="/;s/\\(LASTNAME.*\\)/\\1"/;' > values
        cat values
        . ./values
        echo "$CUSTOMERNAME"
		export PRODUCTNAME="$PRODUCTNAME" > sample3.txt
		cat sample3.txt
		export ACCOUNT_NAME="$ACCOUNTNAME" 
		echo 'ACCOUNT_NAME="'"$ACCOUNT_NAME"'"' > $WORKSPACE/sample2.txt
		echo  'CUSTOMER_NAME1="'"$CUSTOMERNAME"'"' >> $WORKSPACE/sample2.txt
		cat $WORKSPACE/sample2.txt
                echo  'PRODUCTNAME="'"$PRODUCTNAME"'"' > $WORKSPACE/values.txt
                echo  'CUSTOMER_NAME="'"$CUSTOMERNAME"'"' >> $WORKSPACE/values.txt
                echo 'CITY="'"$CITY"'"' >> $WORKSPACE/values.txt
                echo 'ADDRESS1="'"$ADDRESS1"'"'  >> $WORKSPACE/values.txt
                echo 'STATE="'"$STATE"'"' >> $WORKSPACE/values.txt
                echo 'FIRSTNAME="'"$FIRSTNAME"'"' >> $WORKSPACE/values.txt
                echo 'LASTNAME="'"$LASTNAME"'"'  >> $WORKSPACE/values.txt
                echo 'COUNTRY="'"$COUNTRY"'"' >> $WORKSPACE/values.txt
                echo 'ZIPPOSTALCODE="'"$ZIPPOSTALCODE"'"' >> $WORKSPACE/values.txt
                echo 'CREATEDBY="'"$CREATEDBY"'"' >> $WORKSPACE/values.txt
                echo 'UPDATEBY="'"$EMAIL"'"'  >> $WORKSPACE/values.txt
                echo 'EMAIL="'"$EMAIL"'"' >> $WORKSPACE/values.txt
                cat $WORKSPACE/values.txt
				
               '''
			   }
			   
			   sh '''
			echo "$unique_ID1"
			echo 'TENANT_UUID="'"$unique_ID1"'"' > $WORKSPACE/resource.txt
			. $WORKSPACE/resource.txt
			FRIENDLY_NAME1=$(echo $TENANT_UUID | head -c 8)
			Date=$(date +%F)
			DATE=$(echo $Date | sed 's/-//g')
			echo 'FRIENDLY_NAME="'"$FRIENDLY_NAME1$DATE"'"' >> $WORKSPACE/resource.txt
			. $WORKSPACE/resource.txt
			'''
			sh '''
			ENTERPRISE_KEY=$(date +%s | sha256sum | base64 | head -c 16 | tr "[:upper:]" "[:lower:]" | sed 's/./-/9;s/./-/14';)
			echo ENTERPRISE_KEY value is "$ENTERPRISE_KEY"
			echo 'ENTERPRISE_KEY="'"$ENTERPRISE_KEY"'"' >> $WORKSPACE/resource.txt
			echo "$unique_Id"
			ENCRYPTION_KEY=$(echo  $unique_Id | sed 's/-//g')
			echo 'ENCRYPTION_KEY="'"$ENCRYPTION_KEY"'"' >> $WORKSPACE/resource.txt
			'''
			   
			   container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
                            . $WORKSPACE/resource.txt
			    echo " Creating IAM User "
			    echo "======================"
                            aws iam create-user --user-name $FRIENDLY_NAME
                            export POLICYARN1=$(aws iam list-policies --query 'Policies[?PolicyName==`AmazonCognitoPowerUser`].{ARN:Arn}' --output text)
                            echo 'POLICYARN1="'"$POLICYARN1"'"' >> $WORKSPACE/resource.txt
                            aws iam attach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICYARN1
                            aws iam create-access-key --user-name $FRIENDLY_NAME | tee automation.txt
                            USER_ACCESSKEY=$( grep "AccessKeyId" automation.txt | awk '{print$2}')
                            echo "user accesskey $USER_ACCESSKEY"
                            USER_ACCESSKEY=$(echo  $USER_ACCESSKEY | sed 's/"//g')
                            USER_ACCESSKEY=$(echo $USER_ACCESSKEY | sed 's/,//g')
                            echo "USER_ACCESSKEY $USER_ACCESSKEY"
                            USER_ACCESSKEY=$(echo -n "$USER_ACCESSKEY" | base64)
                            echo 'USER_ACCESSKEY="'"$USER_ACCESSKEY"'"' >> $WORKSPACE/resource.txt
                            echo  "USER_ACCESSKEY $USER_ACCESSKEY"
                            USER_SECRETKEY=$( grep "SecretAccessKey" automation.txt | awk '{print$2}' )
                            echo "user secretkey $USER_SECRETKEY"
                            USER_SECRETKEY=$(echo  $USER_SECRETKEY | sed 's/"//g;s/,//g')
                            echo "user_secret key $USER_SECRETKEY"
                            USER_SECRETKEY=$(echo -n "$USER_SECRETKEY" | base64)
                            echo 'USER_SECRETKEY="'"$USER_SECRETKEY"'"' >> $WORKSPACE/resource.txt
                            echo  "user_secret key $USER_SECRETKEY"
                            cat $WORKSPACE/resource.txt
			    echo "IAM User Created"
							'''
						}
					}
				}
				
				container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
			sh '''
			    . $WORKSPACE/resource.txt
			    echo "Creating S3 Bucket"
			    echo "==================="
			    cd $AUTOMATION_DIR
			    BUCKET_NAME="$FRIENDLY_NAME-riq"
			    CALLEREFERENCE="$FRIENDLY_NAME"
			    ls -l
                            aws s3api create-bucket --bucket $BUCKET_NAME --region us-west-2 --create-bucket-configuration LocationConstraint=us-west-2 | tee automation.txt
                            cat automation.txt
                            S3_BUCKET_NAME=$( grep "Location" automation.txt | awk '{print$2}')
                            echo " S3_BUCKET_NAME $S3_BUCKET_NAME"
                            S3_BUCKET_NAME=$(echo  $S3_BUCKET_NAME | sed 's/"//g')
                            echo 'S3_BUCKET_NAME="'"$S3_BUCKET_NAME"'"' | tee automation.txt
                            sed -i "s|http://||g" automation.txt
                            sed -i "s|.s3.amazonaws.com/||g" automation.txt
                            cat automation.txt  >> $WORKSPACE/resource.txt
                            echo 'DEPLOY_UI_S3="'"s3://$FRIENDLY_NAME-riq"'"' >> $WORKSPACE/resource.txt
                            cat $WORKSPACE/resource.txt
			    aws s3api put-bucket-encryption --bucket $BUCKET_NAME --server-side-encryption-configuration '{ "Rules": [ { "ApplyServerSideEncryptionByDefault": { "SSEAlgorithm": "aws:kms", "KMSMasterKeyID": "arn:aws:kms:us-west-2:641518622681:key/58e078f9-1efe-41df-b07a-905b76126bc5" }, "BucketKeyEnabled": true } ] }' 
			    echo "Created S3 Bucket"
							'''
							}
						}
					}
					
					container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
			 sh '''
			    . $WORKSPACE/resource.txt
                	    cat resource.txt
                            ls $WORKSPACE/resource.txt
			    cd $AUTOMATION_DIR
			    sed -i "s|FRIENDLY_NAME|${FRIENDLY_NAME}|g" s3_rhea.json
                	    sed -i "s|bucket_name|${S3_BUCKET_NAME}|g" s3_rhea.json
			    sed -i "s|TENANT_UUID|${TENANT_UUID}|g" s3_rhea.json
			    aws s3 cp sample.txt s3://${S3_BUCKET_NAME}/${TENANT_UUID}/sqs_temp/
                aws s3api put-bucket-policy --bucket $S3_BUCKET_NAME --policy file://s3_rhea.json
						'''
						}
						}
						
			container(name: 'awscli') {
            withAWS(region:'us-east-1',credentials:'aws'){
            sh '''
			. $WORKSPACE/values.txt
			. $WORKSPACE/sample2.txt
			echo  'PRODUCTNAME="'"$PRODUCTNAME"'"' >> $WORKSPACE/resource.txt
                echo  'CUSTOMER_NAME="'"$CUSTOMERNAME"'"' >> $WORKSPACE/resource.txt
                echo 'CITY="'"$CITY"'"' >> $WORKSPACE/resource.txt
                echo 'ADDRESS1="'"$ADDRESS1"'"'  >> $WORKSPACE/resource.txt
                echo 'STATE="'"$STATE"'"' >> $WORKSPACE/resource.txt
                echo 'FIRSTNAME="'"$FIRSTNAME"'"' >> $WORKSPACE/resource.txt
                echo 'LASTNAME="'"$LASTNAME"'"'  >> $WORKSPACE/resource.txt
                echo 'COUNTRY="'"$COUNTRY"'"' >> $WORKSPACE/resource.txt
                echo 'ZIPPOSTALCODE="'"$ZIPPOSTALCODE"'"' >> $WORKSPACE/resource.txt
                echo 'CREATEDBY="'"$CREATEDBY"'"' >> $WORKSPACE/resource.txt
                echo 'UPDATEBY="'"$EMAIL"'"'  >> $WORKSPACE/resource.txt
                echo 'EMAIL="'"$EMAIL"'"' >> $WORKSPACE/resource.txt
			
			'''
			}
			}
			
			container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
			sh '''
			. $WORKSPACE/resource.txt
			COGNITO_POOL_ID="us-west-2_PcEX47dJo"
                echo  'COGNITO_POOL_ID="'"$COGNITO_POOL_ID"'"' >> $WORKSPACE/resource.txt
			    cat $WORKSPACE/resource.txt
                COGNITO_CLIENT_ID="31afondv9os6ke7db63fbr7gf5"
                echo 'COGNITO_CLIENT_ID="'"$COGNITO_CLIENT_ID"'"' >> $WORKSPACE/resource.txt
			    cat $WORKSPACE/resource.txt
				
				aws s3 cp $WORKSPACE/resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                echo FRIENDLY_NAME="$FRIENDLY_NAME" > $WORKSPACE/var.properties
				cd $WORKSPACE
                	    echo "{\\"FRIENDLY_NAME\\": \\"$FRIENDLY_NAME\\"}" > artifact.json
			    ls -l artifact.json
			    cat artifact.json
			 '''
			 archiveArtifacts 'artifact.json'
                        }
            }    
              }
			  
			container(name: 'curl') {
			sh '''
			cd $AUTOMATION_DIR
			. $WORKSPACE/sample2.txt
			. $WORKSPACE/token.txt
			. $WORKSPACE/resource.txt
			sed -i "s|TENANT_ID|${TENANT_UUID}|" customer4.json
			sed -i "s|CustomerName|${CUSTOMER_NAME1}|" customer4.json
			sed -i "s|POOL_ID|${COGNITO_POOL_ID}|" customer4.json
			sed -i "s|ADMIN_EMAIL|${EMAIL}|" customer4.json
			sed -i "s|test16|${FRIENDLY_NAME}|" customer4.json
			sed -i "s|AccountName|${ACCOUNT_NAME}|" customer4.json
			sed -i "s|mountroad|${ADDRESS1}|" customer4.json
			sed -i "s|chennai|${CITY}|" customer4.json
			sed -i "s|TN|${STATE}|" customer4.json
			sed -i "s|IN|${COUNTRY}|" customer4.json
			sed -i "s|522100|${ZIPPOSTALCODE}|" customer4.json
			sed -i "s|vkadiyala@releaseiq.io|${EMAIL}|" customer4.json
			echo FRIENDLY_NAME="$FRIENDLY_NAME" > $WORKSPACE/var.properties
			cat customer4.json
			STATUS=$(curl --header 'Content-type: application/json' -H "Authorization: Bearer ${token}" --request POST -d @./customer4.json -o automation.txt -w '%{http_code}' https://prod.api.releaseiq.io/cm/createenterpriseresource)
			echo $STATUS
			cat automation.txt
			if [ $STATUS -eq 200 ]; then
			echo "Got 200! All done!"
			break
			else
			echo "Got $STATUS :( Not done yet..."
			exit
			fi
			'''
			}
			
			script {
			def props = readProperties file: 'var.properties'
			env.FRIENDLY_NAME = props.FRIENDLY_NAME	
			buildName "$FRIENDLY_NAME"
			
			
			}
			
						
		}
		}
		
		stage ('SVC_UPDATE') {
	steps {
	script {
	def props = readProperties file: 'var.properties'
	env.FRIENDLY_NAME = props.FRIENDLY_NAME
			
	build job: 'rhea_ess_pro_svc_config_update', parameters: [
    [$class: 'StringParameterValue', name: 'FRIENDLY_NAME', value: "$FRIENDLY_NAME"]
    ], propagate: true, wait: true
}
}
}

 
}
}

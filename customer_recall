   pipeline {
  environment {
    EMAIL_TO = ' subhani.s@releaseiq.io'
    AUTOMATION_DIR='build/automation'
    USER_NAME="tsubhanishaik86@gmail.com"
	App="app.txt"
    /*
    deleted input parameters
    JIRA_TICKET="rsk-100"
    BASE_PKG_NAME="solta-riq-agent"
    DATABASE_PASSWORD="12345678"
    ENTERPRISE_KEY="12345678"
    */
  }
  agent {
    kubernetes {
      //Cloud Kubernetes
      yaml """
      kind: Pod
      metadata:
        name: kaniko
      spec:
        containers:
        - name: awscli
          image: docker.io/mikesir87/aws-cli:1.18.76
          imagePullPolicy: IfNotPresent
          command:
          -  cat
          tty: true
        - name: curl
          image: docker.io/gempesaw/curl-jq:latest
          imagePullPolicy: IfNotPresent
          command:
          -  cat
          tty: true
        - name: kaniko
          image: gcr.io/kaniko-project/executor:debug-539ddefcae3fd6b411a95982a830d987f4214251
          imagePullPolicy: IfNotPresent
          command:
          - cat
          tty: true
          volumeMounts:
            - name: docker-config
              mountPath: /kaniko/.docker
        volumes:
          - name: docker-config
            configMap:
              name: docker-config
      """
    }
  }
    stages{
      stage('Id from repo') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github-staging', url: 'https://github.com/riq-staging/riq-repo03.git']]])
      }
      }
	  stage('Id') {
          steps {
              script {
                  sh '''
                  ID=$(git log -1 --pretty=%B | cut -d ":" -f2-)  
                  echo value of ID is "$ID"
                  echo ID="$ID" | tee automation.txt
                  cat $WORKSPACE/automation.txt
                  
                    '''
                }
                  
          }
      }
       stage ("Id value") {
           steps {
               container(name: 'curl') {
               script {
               sh '''
               ID=$( grep "ID" automation.txt | awk '{print$1}')
               ID=$(echo  $ID | sed 's/ID//g')
               ID=$(echo  $ID | sed 's/=//g')
               cat $WORKSPACE/automation.txt
               echo "$ID"
               curl -X PUT  "http://prod.api.releaseiq.io/cm/approveNewCustomer/$ID/1"
               curl https://prod.api.releaseiq.io/cm/getNewCustomer/$ID/1 | tee sample.txt
               cat $WORKSPACE/sample.txt
               cat $WORKSPACE/sample.txt | awk ' BEGIN {FS=":";RS=","};
 {
{print toupper($1), $2}
}'| sed 's/{//g;s/}/ /;s/ /=/;s/"//g;s/^SIZE.*//;s/CREATED_ON.*//;s/UPDATED_ON.*//;s/ADDRESS1=/ADDRESS1="/;s/\\(ADDRESS1.*\\)/\\1"/;s/CUSTOMERNAME=/CUSTOMERNAME="/;s/\\(CUSTOMERNAME.*\\)/\\1"/;s/STATE=/STATE="/;s/\\(STATE.*\\)/\\1"/;s/CITY=/CITY="/;s/\\(CITY.*\\)/\\1"/;s/FIRSTNAME=/FIRSTNAME="/;s/\\(FIRSTNAME.*\\)/\\1"/;s/LASTNAME=/LASTNAME="/;s/\\(LASTNAME.*\\)/\\1"/;' > values
                cat values
                . ./values
                echo "$CUSTOMERNAME"
                FRIENDLYNAME=$( echo $CUSTOMERNAME | awk '{print tolower($1)}')
                echo "$FRIENDLYNAME"
                echo  'CUSTOMER_NAME="'"$CUSTOMERNAME"'"' > $WORKSPACE/app.txt
                echo  'FRIENDLY_NAME="'"$FRIENDLYNAME"'"' >> $WORKSPACE/app.txt
                echo 'CITY="'"$CITY"'"' >> $WORKSPACE/app.txt
                echo 'ADDRESS1="'"$ADDRESS1"'"'  >> $WORKSPACE/app.txt
                echo 'STATE="'"$STATE"'"' >> $WORKSPACE/app.txt
                echo 'FIRSTNAME="'"$FIRSTNAME"'"' >> $WORKSPACE/app.txt
                echo 'LASTNAME="'"$LASTNAME"'"'  >> $WORKSPACE/app.txt
                echo 'COUNTRY="'"$COUNTRY"'"' >> $WORKSPACE/app.txt
                echo 'ZIPPOSTALCODE="'"$ZIPPOSTALCODE"'"' >> $WORKSPACE/app.txt
                echo 'CREATEDBY="'"$CREATEDBY"'"' >> $WORKSPACE/app.txt
                echo 'UPDATEBY="'"$EMAIL"'"'  >> $WORKSPACE/app.txt
                echo 'EMAIL="'"$EMAIL"'"' >> $WORKSPACE/app.txt
                cat $WORKSPACE/app.txt
               '''
               }
               }
           }
       }
       stage('values'){
           steps{
            container(name: 'awscli') {
            withAWS(region:'us-east-1',credentials:'aws'){
            sh '''
            FRIENDLY_NAME=$(grep "FRIENDLY_NAME" app.txt | awk '{print$1}')
            FRIENDLY_NAME=$(echo  $FRIENDLY_NAME | sed 's/FRIENDLY_NAME//g')
            FRIENDLY_NAME=$(echo  $FRIENDLY_NAME | sed 's/=//g')
            echo $FRIENDLY_NAME
              aws s3 cp $WORKSPACE/app.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
            '''
              }
       }
           }
       }
       stage('copy aws'){
           steps{
               container(name: 'awscli') {
               withAWS(region:'us-east-1',credentials:'aws'){
               sh '''
               FRIENDLY_NAME=$(grep "FRIENDLY_NAME" app.txt | awk '{print$1}')
               FRIENDLY_NAME=$(echo  $FRIENDLY_NAME | sed 's/FRIENDLY_NAME//g')
               FRIENDLY_NAME=$(echo  $FRIENDLY_NAME | sed 's/=//g')
               echo $FRIENDLY_NAME
               mkdir temp
               App="app.txt"
               aws s3 cp s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/$App  $WORKSPACE/temp/
               chmod -R 777 temp/$App
               chown -R 1000:1000 temp
               ls -l $WORKSPACE/temp/
               sed -i 's/^/export /;/=/!d' $WORKSPACE/temp/$App
               . $WORKSPACE/temp/$App
                echo Lets do some testing - variable FRIENDLY_NAME "${FRIENDLY_NAME}"
               '''
           }
               }
           }
       }
       stage('test variable') {
           steps {
               sh '''
               . $WORKSPACE/temp/$App
               echo FRIENDLY_NAME $FRIENDLY_NAME
               '''
           }
       }
      stage('checkout') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/riqio/riq-jenkins-pipeline-jobs.git']]])
      }
      }
      stage("Create IAM User") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
							app=$(aws iam get-user --user-name $FRIENDLY_NAME) || true
							mkdir demo1
			                aws s3 cp s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/resource.txt  $WORKSPACE/demo1/ || true
							chmod -R 777 demo1/resource.txt || true
							chown -R 1000:1000 demo1 || true
							ls -l $WORKSPACE/demo1/ || true
							if [ "$app" != "" ]
							then
							. $WORKSPACE/demo1/resource.txt
							fi
							accesskey=$(echo $USER_ACCESSKEY | base64 -d) || true
							 echo $accesskey || true
							   aws iam delete-access-key --access-key-id $accesskey --user-name $FRIENDLY_NAME || true
                              aws iam detach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICYARN || true
                              aws iam detach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICYARN1 || true
                              aws iam detach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICY_ARN || true
                              aws iam detach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICY_ARN1 || true
                              aws iam delete-policy --policy-arn $POLICY_ARN || true
                              aws iam delete-user --user-name $FRIENDLY_NAME || true
							aws iam list-attached-user-policies --user-name $FRIENDLY_NAME || true
							echo " Creating IAM User "
							echo "======================"
                            aws iam create-user --user-name $FRIENDLY_NAME || true
                            export POLICYARN=$(aws iam list-policies --query 'Policies[?PolicyName==`ReadOnlyAccess`].{ARN:Arn}' --output text) || true
                            export POLICYARN1=$(aws iam list-policies --query 'Policies[?PolicyName==`AmazonCognitoPowerUser`].{ARN:Arn}' --output text) || true
                            echo 'POLICYARN="'"$POLICYARN"'"'  >  $WORKSPACE/resource.txt || true
                            echo 'POLICYARN1="'"$POLICYARN1"'"' >> $WORKSPACE/resource.txt || true
                            aws iam attach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICYARN || true
                            aws iam attach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICYARN1 || true
                            aws iam create-access-key --user-name $FRIENDLY_NAME | tee automation.txt || true
                            USER_ACCESSKEY=$( grep "AccessKeyId" automation.txt | awk '{print$2}') || true
                            echo "user accesskey $USER_ACCESSKEY" || true
                            USER_ACCESSKEY=$(echo  $USER_ACCESSKEY | sed 's/"//g') || true
                            USER_ACCESSKEY=$(echo $USER_ACCESSKEY | sed 's/,//g') || true
                            echo "USER_ACCESSKEY $USER_ACCESSKEY" || true
                            USER_ACCESSKEY=$(echo $USER_ACCESSKEY | base64) || true
                            echo 'USER_ACCESSKEY="'"$USER_ACCESSKEY"'"' >> $WORKSPACE/resource.txt || true
                            echo  "USER_ACCESSKEY $USER_ACCESSKEY" || true
                            USER_SECRETKEY=$( grep "SecretAccessKey" automation.txt | awk '{print$2}' ) || true
                            echo "user secretkey $USER_SECRETKEY" || true
                            USER_SECRETKEY=$(echo  $USER_SECRETKEY | sed 's/"//g;s/,//g') || true
                            echo "user_secret key $USER_SECRETKEY" || true 
                            USER_SECRETKEY=$(echo $USER_SECRETKEY | base64) || true
                            echo 'USER_SECRETKEY="'"$USER_SECRETKEY"'"' >> $WORKSPACE/resource.txt || true
                            echo  "user_secret key $USER_SECRETKEY" || true
                            cat $WORKSPACE/resource.txt || true
							echo "IAM User Created" 
							'''
						}
					}
				}
			}
		}
		stage("pushing1") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
                            cat resource.txt
                            ls $WORKSPACE/resource.txt
                            aws s3 cp resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                            '''
                        }
            }
              }
          }
      }
		stage("Create S3_bucket") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
						sh '''
						. $WORKSPACE/temp/$App
							echo "Creating S3 Bucket"
							echo "==================="
							cd $AUTOMATION_DIR
							BUCKET_NAME="www.$FRIENDLY_NAME.releaseiq.io"
							CALLEREFERENCE="$FRIENDLY_NAME"
							ls -l
							aws s3 ls s3://www.$FRIENDLY_NAME.releaseiq.io || true
							aws s3 rb s3://www.${FRIENDLY_NAME}.releaseiq.io --force || true
                            aws s3api create-bucket --bucket $BUCKET_NAME --region us-west-2 --create-bucket-configuration LocationConstraint=us-west-2  | tee automation.txt
                            cat automation.txt || true
                            S3_BUCKET_NAME=$( grep "Location" automation.txt | awk '{print$2}') || true
                            echo " S3_BUCKET_NAME $S3_BUCKET_NAME" || true
                            S3_BUCKET_NAME=$(echo  $S3_BUCKET_NAME | sed 's/"//g') || true
                            echo 'S3_BUCKET_NAME="'"$S3_BUCKET_NAME"'"' | tee automation.txt || true
                            sed -i "s|http://||g" automation.txt || true
                            sed -i "s|.s3.amazonaws.com/||g" automation.txt || true
                            cat automation.txt  >> $WORKSPACE/resource.txt || true
                            cat $WORKSPACE/resource.txt || true
							echo "Created S3 Bucket"
							'''
							}
						}
					}
				}
			}
			stage("pushing2") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
                            cat resource.txt
                            ls $WORKSPACE/resource.txt
                            aws s3 cp resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                            '''
                        }
            }
              }
          }
      }
			stage("certificate") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
						sh '''
						. $WORKSPACE/temp/$App
							echo "Creating CDN"
							echo "====================="
							cd $AUTOMATION_DIR
							ls -l
							DOMAIN_NAME="${FRIENDLY_NAME}.releaseiq.io"
							DOMAIN_NAME1="*.${FRIENDLY_NAME}.releaseiq.io"
							BUCKET_NAME="www.$FRIENDLY_NAME.releaseiq.io"
							CALLEREFERENCE="$FRIENDLY_NAME"
						ACM_CERTIFICATE_ARN=$(aws acm request-certificate --domain-name "$DOMAIN_NAME" --subject-alternative-names "$DOMAIN_NAME1" --validation-method DNS --region us-east-1 --query CertificateArn --output text)
						echo $ACM_CERTIFICATE_ARN
						echo 'ACM_CERTIFICATE_ARN="'"$ACM_CERTIFICATE_ARN"'"' >> $WORKSPACE/resource.txt
						sleep 60;
						VALIDATION_NAME="$(aws acm describe-certificate --region us-east-1 --certificate-arn "$ACM_CERTIFICATE_ARN" --query "Certificate.DomainValidationOptions[?DomainName=='$DOMAIN_NAME'].ResourceRecord.Name" --output text)"
						echo $VALIDATION_NAME
						echo 'VALIDATION_NAME="'"$VALIDATION_NAME"'"' >> $WORKSPACE/resource.txt
						VALIDATION_VALUE="$(aws acm describe-certificate --region us-east-1 --certificate-arn "$ACM_CERTIFICATE_ARN" --query "Certificate.DomainValidationOptions[?DomainName=='$DOMAIN_NAME'].ResourceRecord.Value" --output text)"
						echo $VALIDATION_VALUE
						echo 'VALIDATION_VALUE="'"$VALIDATION_VALUE"'"' >> $WORKSPACE/resource.txt
						VALIDATION_NAME1="$(aws acm describe-certificate --region us-east-1 --certificate-arn "$ACM_CERTIFICATE_ARN" --query "Certificate.DomainValidationOptions[?DomainName=='$DOMAIN_NAME1'].ResourceRecord.Name" --output text)"
						echo $VALIDATION_NAME1
						VALIDATION_VALUE1="$(aws acm describe-certificate --region us-east-1 --certificate-arn "$ACM_CERTIFICATE_ARN" --query "Certificate.DomainValidationOptions[?DomainName=='$DOMAIN_NAME1'].ResourceRecord.Value" --output text)"
						echo $VALIDATION_VALUE1
						sed -i "s|"_14fa247d30c58f70d8ea959bbd1b14c5.test67.releaseiq-dev.com."|${VALIDATION_NAME}|g" cnt.json
						sed -i "s|"_cc0430984b064b3ee1556d1cc65d884d.bsgbmzkfwj.acm-validations.aws."|${VALIDATION_VALUE}|g" cnt.json
						sed -i "s|"_14fa247d30c58f70d8ea959bbd1b14c5.test67.releaseiq-dev.com."|${VALIDATION_NAME1}|g" cnt1.json
						sed -i "s|"_cc0430984b064b3ee1556d1cc65d884d.bsgbmzkfwj.acm-validations.aws."|${VALIDATION_VALUE1}|g" cnt1.json
						sed -i "s|"_14fa247d30c58f70d8ea959bbd1b14c5.test67.releaseiq-dev.com."|${VALIDATION_NAME}|g" cntdel.json
						sed -i "s|"_cc0430984b064b3ee1556d1cc65d884d.bsgbmzkfwj.acm-validations.aws."|${VALIDATION_VALUE}|g" cntdel.json
						sed -i "s|"arn:aws:acm:us-east-1:641518622681:certificate/583e09a0-c076-4efa-b1ee-37acd0903eea"|${ACM_CERTIFICATE_ARN}|g" cdn1.json
						cat $WORKSPACE/build/automation/cnt.json
						sed -i "s|"_14fa247d30c58f70d8ea959bbd1b14c5.test67.releaseiq-dev.com."|${VALIDATION_NAME}|g" cntdel.json
						sed -i "s|"_cc0430984b064b3ee1556d1cc65d884d.bsgbmzkfwj.acm-validations.aws."|${VALIDATION_VALUE}|g" cntdel.json
						aws route53 change-resource-record-sets --region us-east-1 --hosted-zone-id Z0568494V6417TSHKNL7 --change-batch file://cntdel.json || true
							echo "cname create the route53 record"
						aws route53 change-resource-record-sets --region us-east-1 --hosted-zone-id Z0568494V6417TSHKNL7 --change-batch file://cnt.json || true
						ACM_CERTIFICATE_STATUS="$(aws acm describe-certificate --region us-east-1 --certificate-arn "$ACM_CERTIFICATE_ARN" --query "Certificate.Status" --output text)"
						echo $ACM_CERTIFICATE_STATUS
						ACM_CERTIFICATE="$(aws acm describe-certificate --region us-east-1 --certificate-arn "$ACM_CERTIFICATE_ARN" --output json)"
						echo $ACM_CERTIFICATE
						if [ "$ACM_CERTIFICATE_STATUS" = "ISSUED" ]; then
                        GREP_GREEN="1;32"
                        echo "$ACM_CERTIFICATE" | GREP_COLOR="$GREP_GREEN" grep --color -E "\"Status\": \"${ACM_CERTIFICATE_STATUS}\"|$"
                        else
                        GREP_RED="1;31"
                        echo "$ACM_CERTIFICATE" | GREP_COLOR="$GREP_RED" grep --color -E "\"Status\": \"${ACM_CERTIFICATE_STATUS}\"|$"
                        fi
                        '''
                        }
            }    
              }
          }
      }
	  stage("pushing3") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
                            cat resource.txt
                            ls $WORKSPACE/resource.txt
                            aws s3 cp resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                            '''
                        }
            }
              }
          }
      }
		stage("Sqs_Queues") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
						sh '''
						. $WORKSPACE/temp/$App
							echo "Creating Sqs Queues"
							echo "======================"
							cd $AUTOMATION_DIR
							ls -l
							SQS_NAME="${FRIENDLY_NAME}_health_riq-agent_productbe.fifo"
							SQS_NAME1="${FRIENDLY_NAME}_pipeline_riq-agent_productbe.fifo"
							SQS_NAME2="${FRIENDLY_NAME}_actions_productbe_riq-agent.fifo"
							SQS_NAME3="${FRIENDLY_NAME}_adminbe_riq-agent.fifo"
							SQS_NAME4="${FRIENDLY_NAME}_riq-agent_adminbe.fifo"
							app_name3=$(aws sqs get-queue-url --queue-name $SQS_NAME) || true
							if [ "$app_name3" != "" ]
							then
							echo "$SQS_NAME"
							else
                            aws sqs create-queue --queue-name $SQS_NAME --region us-west-2 --attributes file://sqs.json | tee 	automation.txt
			                HEALTH_SQS_QUEUE=$(grep "QueueUrl" 	automation.txt | awk '{print$2}')
                            echo "HEALTH_SQS_QUEUE url $HEALTH_SQS_QUEUE"
                            HEALTH_SQS_QUEUE=$(echo  $HEALTH_SQS_QUEUE | sed 's/"//g')
                            echo 'HEALTH_SQS_QUEUE="'"$HEALTH_SQS_QUEUE"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
							fi
							app_name4=$(aws sqs get-queue-url --queue-name $SQS_NAME1) || true
							if [ "$app_name4" != "" ]
							then
							echo "$SQS_NAME1"
							else
                            aws sqs create-queue --queue-name $SQS_NAME1 --region us-west-2 --attributes file://sqs.json | tee 	automation.txt
			                PORTAL_SQS_QUEUE=$(grep "QueueUrl" 	automation.txt | awk '{print$2}')
                            echo "PORTAL_SQS_QUEUE url $PORTAL_SQS_QUEUE"
                            PORTAL_SQS_QUEUE=$(echo  $PORTAL_SQS_QUEUE | sed  's/"//g')
                            echo 'PORTAL_SQS_QUEUE="'"$PORTAL_SQS_QUEUE"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
							fi
							app_name5=$(aws sqs get-queue-url --queue-name $SQS_NAME2) || true
							if [ "$app_name5" != "" ]
							then
							echo "$SQS_NAME2"
							else
                            aws sqs create-queue --queue-name $SQS_NAME2 --region us-west-2 --attributes file://sqs.json | tee automation.txt
			                MANAGE_SQS_QUEUE=$(grep "QueueUrl" 	automation.txt | awk '{print$2}')
                            echo "MANAGE_SQS_QUEUE url $MANAGE_SQS_QUEUE"
                            MANAGE_SQS_QUEUE=$(echo  $MANAGE_SQS_QUEUE | sed 's/"//g')
                            echo 'MANAGE_SQS_QUEUE="'"$MANAGE_SQS_QUEUE"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
							fi
							app_name6=$(aws sqs get-queue-url --queue-name $SQS_NAME3) || true
							if [ "$app_name6" != "" ]
							then
							echo "$SQS_NAME3"
							else
                            aws sqs create-queue --queue-name $SQS_NAME3 --region us-west-2 --attributes file://sqs.json | tee automation.txt
			                SETTING_SQS_QUEUE=$(grep "QueueUrl" automation.txt | awk '{print$2}')
                            echo "SETTING_SQS_QUEUE=$SETTING_SQS_QUEUE"
                            SETTING_SQS_QUEUE=$(echo  $SETTING_SQS_QUEUE | sed 's/"//g')
                            echo 'SETTING_SQS_QUEUE="'"$SETTING_SQS_QUEUE"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
							fi
							app_name7=$(aws sqs get-queue-url --queue-name $SQS_NAME4) || true
							if [ "$app_name7" != "" ]
							then
							echo "$SQS_NAME4"
							else
                            aws sqs create-queue --queue-name $SQS_NAME4 --region us-west-2 --attributes file://sqs.json | tee automation.txt
			                ACK_SQS_QUEUE=$(grep "QueueUrl" automation.txt | awk '{print$2}')
                            echo "ACK_SQS_QUEUE $ACK_SQS_QUEUE"
                            ACK_SQS_QUEUE=$(echo  $ACK_SQS_QUEUE | sed 's/"//g')
                            echo 'ACK_SQS_QUEUE="'"$ACK_SQS_QUEUE"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
							fi
							sed -i "s|queue.fifo|${SQS_NAME}|g" sqs4.json
							sed -i "s|queue1.fifo|${SQS_NAME1}|g" sqs4.json
							sed -i "s|queue2.fifo|${SQS_NAME2}|g" sqs4.json
							sed -i "s|queue3.fifo|${SQS_NAME3}|g" sqs4.json
                            sed -i "s|queue4.fifo|${SQS_NAME4}|g" sqs4.json
                            aws iam create-policy --policy-name ${FRIENDLY_NAME}.onboarding --policy-document file://sqs4.json | tee automation.txt
                            aws iam attach-user-policy --policy-arn arn:aws:iam::641518622681:policy/${FRIENDLY_NAME}.onboarding --user-name $FRIENDLY_NAME
			                POLICY_ARN=$(grep "Arn" automation.txt | awk '{print$2}')
			                POLICY_ARN=$(echo  $POLICY_ARN | sed 's/"//g;s/,//g')
			                echo 'POLICY_ARN="'"$POLICY_ARN"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
							echo "Created Sqs Queues"
							'''
							}
					}
				}
			}
		}
		stage("pushing4") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
                            cat resource.txt
                            ls $WORKSPACE/resource.txt
                            aws s3 cp resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                            '''
                        }
            }
              }
          }
      }
		stage ('Ses') {
			steps {
				container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
						sh '''
						. $WORKSPACE/temp/$App
						echo "Iam user to add ses email"
						echo "==============================="
						cd $AUTOMATION_DIR
						ls -l
						aws iam create-policy --policy-name $FRIENDLY_NAME --policy-document file://ses.json | tee automation.txt 
                        aws iam attach-user-policy --policy-arn arn:aws:iam::641518622681:policy/$FRIENDLY_NAME --user-name $FRIENDLY_NAME
						POLICY_ARN1=$(grep "Arn" automation.txt | awk '{print$2}')
			               		POLICY_ARN1=$(echo  $POLICY_ARN1 | sed 's/"//g;s/,//g')
			                	echo 'POLICY_ARN1="'"$POLICY_ARN1"'"' >> $WORKSPACE/resource.txt
			                	cat $WORKSPACE/resource.txt
						'''
			        }
			    }
			}
		}
	}
	stage("pushing5") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
                            cat resource.txt
                            ls $WORKSPACE/resource.txt
                            aws s3 cp resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                            '''
                        }
            }
              }
          }
      }
	stage("Cognito") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
						sh '''
						. $WORKSPACE/temp/$App
						    mkdir demo3
			                aws s3 cp s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/resource.txt  $WORKSPACE/demo3/ || true
							chmod -R 777 demo3/resource.txt || true
							chown -R 1000:1000 demo3 || true
							ls -l $WORKSPACE/demo3/ || true
							cat $WORKSPACE/demo3/resource.txt || true
							aws cognito-identity delete-identity-pool --identity-pool-id "$COGNITO_POOL_ID" || true
							echo "Creating Cognito Pool"
							echo "======================="
							cd $AUTOMATION_DIR
							ls -l
							CLIENT_NAME="$FRIENDLY_NAME"
							BUCKET_NAME="www.$FRIENDLY_NAME.releaseiq.io"
                            sed -i "s|bucket_name|${BUCKET_NAME}|g" cognito.json
                            aws cognito-idp create-user-pool --pool-name $FRIENDLY_NAME --auto-verified-attributes "email" --username-attributes "email" --username-configuration CaseSensitive=false --sms-verification-message "Your verification code is {####}." --email-verification-message "<p>Hello,</p>\n<p>&nbsp; We have received a request to reset your password.</p>\n\n<p>&nbsp; Please use verification code {####} to reset your password.</p>\n\n<p>Sincerely,\n  <br/>  \nSupport Team - ReleaseIq.io</p>\n" --email-verification-subject "Reset Password - Verification code" --verification-message-template="file://cognito1.json"  --sms-authentication-message "Your authentication code is {####}. " --mfa-configuration "OFF" --email-configuration SourceArn="arn:aws:ses:us-west-2:641518622681:identity/support@releaseiq.io",ReplyToEmailAddress="support@releaseiq.io",EmailSendingAccount="DEVELOPER",From="support@releaseiq.io" --admin-create-user-config="file://cognito.json" --schema Name="email",AttributeDataType="String",DeveloperOnlyAttribute="false",Mutable="true",Required="true"  --account-recovery-setting RecoveryMechanisms="[{Priority="1",Name="verified_email"}]" | tee automation.txt
                            cat automation.txt
                            COGNITO_POOL_ID=$( grep "Id" automation.txt | awk '{print$2}')
                            echo "user pool Id $COGNITO_POOL_ID"
                            COGNITO_POOL_ID=$(echo  $COGNITO_POOL_ID | sed 's/"//g')
                            COGNITO_POOL_ID=$(echo $COGNITO_POOL_ID | sed 's/,//g')
                            echo  'COGNITO_POOL_ID="'"$COGNITO_POOL_ID"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
                            aws cognito-idp create-user-pool-client  --region us-west-2 --user-pool-id $COGNITO_POOL_ID  --client-name $CLIENT_NAME --no-generate-secret --explicit-auth-flows "ALLOW_ADMIN_USER_PASSWORD_AUTH" "ALLOW_USER_SRP_AUTH" "ALLOW_REFRESH_TOKEN_AUTH" --prevent-user-existence-errors "ENABLED" | tee automation.txt
                            COGNITO_CLIENT_ID=$(grep "ClientId" automation.txt | awk '{print$2}')
                            echo "app client Id $COGNITO_CLIENT_ID"
                            COGNITO_CLIENT_ID=$(echo  $COGNITO_CLIENT_ID | sed 's/"//g')
                            COGNITO_CLIENT_ID=$(echo $COGNITO_CLIENT_ID | sed 's/,//g')
                            echo 'COGNITO_CLIENT_ID="'"$COGNITO_CLIENT_ID"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
                            aws cognito-idp create-group --user-pool-id $COGNITO_POOL_ID --group-name Role_Admin --description "Role_Admin"
                            aws cognito-idp create-group --user-pool-id $COGNITO_POOL_ID --group-name Role_Developer --description "Role_Developer"
                            aws cognito-idp create-group --user-pool-id $COGNITO_POOL_ID --group-name Role_Executive --description "Role_Executive"
                            aws cognito-idp create-group --user-pool-id $COGNITO_POOL_ID --group-name Role_DevOps --description "Role_DevOps"
                            aws cognito-idp create-group --user-pool-id $COGNITO_POOL_ID --group-name Role_Manager --description "Role_Manager"
                            aws cognito-idp create-group --user-pool-id $COGNITO_POOL_ID --group-name Role_RIQAdmin --description "Role_RIQAdmin"
			    aws cognito-idp create-group --user-pool-id $COGNITO_POOL_ID --group-name Role_QA --description "Role_QA"
                            echo "Created Cognito Pool"
			                echo 'CUSTOMER_NAME="'"$CUSTOMER_NAME"'"' >> $WORKSPACE/resource.txt
							echo 'FRIENDLY_NAME="'"$FRIENDLY_NAME"'"' >> $WORKSPACE/resource.txt
							echo 'DEPLOY_UI_S3="'"s3://www.$FRIENDLY_NAME.releaseiq.io"'"' >> $WORKSPACE/resource.txt
			                cat $WORKSPACE/resource.txt
                            '''
                        }
            }    
              }
          }
      }
	  stage("pushing6") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
                            cat resource.txt
                            ls $WORKSPACE/resource.txt
                            aws s3 cp resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                            '''
                        }
            }
              }
          }
      }
	  stage('Github repo') {
      steps {
        container(name: 'curl') {
          sh '''
		  . $WORKSPACE/temp/$App
		  REPO_NAME="$FRIENDLY_NAME-riq-agent"
		  curl -H "Authorization: token  389dd5c7cba392204c09c422d7f752d117291a10" --data '{"name":"'"$REPO_NAME"'","private":true}' https://api.github.com/user/repos | tee automation.txt
		  echo 'CUSTOMER_REPO="'"$REPO_NAME"'"' >> $WORKSPACE/resource.txt
		  '''
        }
      }
       }
	   stage("pushing7") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
                            cat resource.txt
                            ls $WORKSPACE/resource.txt
                            aws s3 cp resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                            '''
                        }
            }
              }
          }
      }
	   stage('cdn id') {
		steps {
		container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
		sh '''
		. $WORKSPACE/temp/$App
							echo "Creating CDN"
							echo "====================="
							cd $AUTOMATION_DIR
							ls -l
							BUCKET_NAME="www.$FRIENDLY_NAME.releaseiq.io"
							CALLEREFERENCE="$FRIENDLY_NAME"
							DOMAIN_NAME="${FRIENDLY_NAME}.releaseiq.io"
							DOMAIN_NAME1="*.${FRIENDLY_NAME}.releaseiq.io"
							echo "DELETING CDN"
							echo "====================="
							ls -l
							mkdir demo2
			                aws s3 cp s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/resource.txt  $WORKSPACE/demo2/ || true
							chmod -R 777 demo2/resource.txt || true
							chown -R 1000:1000 demo2 || true
							ls -l $WORKSPACE/demo2/ || true
							cat $WORKSPACE/demo2/resource.txt || true
							sed -i "s|bucket_name|${BUCKET_NAME}|g" cdn4.json
                            sed -i "s|riq1234|${CALLEREFERENCE}|g" cdn4.json
                            sed -i "s|solta|${FRIENDLY_NAME}|g" cdn4.json
			    sed -i "s|arn:aws:acm:us-east-1:641518622681:certificate/cb779149-090d-443e-afd6-45014f85ca25|${ACM_CERTIFICATE_ARN}|g" cdn4.json
							. $WORKSPACE/demo2/resource.txt
							
							if [ "$CDN" != "" ]
							then
							. $WORKSPACE/demo2/resource.txt
							sed -i "s|arn:aws:acm:us-east-1:641518622681:certificate/cb779149-090d-443e-afd6-45014f85ca25|${ACM_CERTIFICATE_ARN}|g" cdn4.json
                            aws cloudfront get-distribution --id $CDN | tee automation.txt
                            cat automation.txt
                            ETAG=$( grep "ETag" automation.txt | awk '{print$2}')
                            echo "cdn Id $ETAG"
                            ETAG=$(echo  $ETAG | sed 's/"//g;s/,//g')
                            echo  'ETAG="'"$ETAG"'"' > sample.txt
                            aws cloudfront update-distribution \
                            --id  $CDN\
                            --if-match $ETAG \
                            --distribution-config file://cdn4.json
                            sleep 600;
			    aws cloudfront get-distribution --id $CDN | tee automation.txt
                            cat automation.txt
                            ETAG1=$( grep "ETag" automation.txt | awk '{print$2}')
                            echo "cdn id $ETAG1"
                            ETAG1=$(echo  $ETAG1 | sed 's/"//g;s/,//g')
                            echo  'ETAG1="'"$ETAG1"'"'
			    aws cloudfront delete-distribution --id $CDN --if-match $ETAG1
			    sleep 80;
			    aws acm delete-certificate --certificate-arn $ACM_CERTIFICATE_ARN
				sed -i "s|"_051a54f9e09ba8685f74032429600c27.www.test92.releaseiq.io."|${VALIDATION_NAME}|g" rc.json
				sed -i "s|"_4add1b26ad63e8edd60658684c02de85.zbkrxsrfvj.acm-validations.aws."|${VALIDATION_VALUE}|g" rc.json
				aws route53 change-resource-record-sets --region us-east-1 --hosted-zone-id Z0568494V6417TSHKNL7 --change-batch file://rc.json
				sed -i "s|bugbash1|${FRIENDLY_NAME}|g" rd.json
				sed -i "s|bugbash1|${FRIENDLY_NAME}|g" rd1.json
				sed -i "s|d312yuxouwkwn9.cloudfront.net|${CDN_URL}|g" rd.json
				sed -i "s|d312yuxouwkwn9.cloudfront.net|${CDN_URL}|g" rd1.json
				aws route53 change-resource-record-sets --hosted-zone-id Z0568494V6417TSHKNL7 --change-batch file://rd.json
				sleep 30;
				aws route53 change-resource-record-sets --hosted-zone-id Z0568494V6417TSHKNL7 --change-batch file://rd1.json
				fi
							sed -i "s|bucket_name|${BUCKET_NAME}|g" cdn1.json
                            sed -i "s|riq1234|${CALLEREFERENCE}|g" cdn1.json
                            sed -i "s|solta|${FRIENDLY_NAME}|g" cdn1.json
							sed -i "s|bugbash1|${FRIENDLY_NAME}|g" record.json
							sed -i "s|bugbash1|${FRIENDLY_NAME}|g" record1.json
							sleep 150;
                             aws cloudfront create-distribution \
                             --distribution-config file://cdn1.json | tee automation.txt
                            cat automation.txt
                            CLOUDFRONT=$( grep "Id" automation.txt | awk '{print$2}')
                            echo "cdn Id $CLOUDFRONT"
                            CLOUDFRONT=$(echo  $CLOUDFRONT | sed 's/"//g;s/,//g')
                            echo  'CLOUDFRONT="'"$CLOUDFRONT"'"' > sample.txt
							CDN=$(cat sample.txt | awk '{print$1}' | sed 's/CLOUDFRONT="//')
							echo 'CDN="'"$CDN"'"'  >> $WORKSPACE/resource.txt
							CDN_URL=$( grep "DomainName" automation.txt | awk '{print$2}')
							echo 'CDN_URL="'"$CDN_URL"'"' >> release.txt
							cat release.txt
							CDN_URL=$(echo  $CDN_URL | sed "s|www.${FRIENDLY_NAME}.releaseiq.io.s3.amazonaws.com||g")
							CDN_URL=$(echo  $CDN_URL | sed 's/"//g;s/,//g;s/ //g')
							echo $CDN_URL
							echo 'CDN_URL="'"$CDN_URL"'"' >> $WORKSPACE/resource.txt
							sed -i "s|d312yuxouwkwn9.cloudfront.net|${CDN_URL}|g" record.json
							cat record.json
							sleep 30;
							aws route53 change-resource-record-sets --hosted-zone-id Z0568494V6417TSHKNL7 --change-batch file://record.json
							sed -i "s|d312yuxouwkwn9.cloudfront.net|${CDN_URL}|g" record1.json
							cat record1.json
							aws route53 change-resource-record-sets --hosted-zone-id Z0568494V6417TSHKNL7 --change-batch file://record1.json
			                cat $WORKSPACE/resource.txt
							echo "Created Cdn"
							
		'''
		            }
		        }
            }
		}
		stage("pushing files") {
          steps {
              container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
							. $WORKSPACE/temp/$App
                            cat resource.txt
                            ls $WORKSPACE/resource.txt
                            aws s3 cp resource.txt s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/
                            '''
                        }
            }
              }
          }
      }
}
}

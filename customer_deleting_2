  pipeline {
  environment {
	AUTOMATION_DIR='build/automation'
    EMAIL_TO = ' subhani.s@releaseiq.io'  
 }
  agent {
    kubernetes {
      //Cloud Kubernetes
      yaml """
      kind: Pod
      metadata:
        name: kaniko
      spec:
        containers:
        - name: awscli
          image: docker.io/mikesir87/aws-cli:1.18.76
          imagePullPolicy: IfNotPresent
          command:
          -  cat
          tty: true
        - name: kaniko
          image: gcr.io/kaniko-project/executor:debug-539ddefcae3fd6b411a95982a830d987f4214251
          imagePullPolicy: IfNotPresent
          command:
          - cat
          tty: true
          volumeMounts:
            - name: docker-config
              mountPath: /kaniko/.docker
        volumes:
          - name: docker-config
            configMap:
              name: docker-config
      """
    }
  }
  stages{
		stage('checkout') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/riqio/riq-jenkins-pipeline-jobs.git']]])
      container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
			sh '''
			mkdir demo
			aws s3 cp s3://riq-staging/customer_onboarding/$FRIENDLY_NAME/resource.txt  $WORKSPACE/demo/
			chmod -R 777 demo/resource.txt
            chown -R 1000:1000 demo
            ls -l $WORKSPACE/demo/
			'''
			}
		}
		container(name: 'awscli'){
            withAWS(region:'us-west-2',credentials:'aws') {
                        script {
                            sh '''
                             . $WORKSPACE/demo/resource.txt
							  accesskey=$(echo $USER_ACCESSKEY | base64 -d)
							 echo $accesskey
							   aws iam delete-access-key --access-key-id $accesskey --user-name $FRIENDLY_NAME || true
                              aws iam detach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICYARN1 || true
							  aws iam detach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICY_ARN || true
                              aws iam detach-user-policy --user-name $FRIENDLY_NAME --policy-arn $POLICY_ARN1 || true
                              aws iam delete-policy --policy-arn $POLICY_ARN || true
                              aws iam delete-user --user-name $FRIENDLY_NAME || true
                              aws s3 rb s3://${FRIENDLY_NAME}-riq --force || true
                              aws sqs delete-queue --queue-url $HEALTH_SQS_QUEUE || true
                              aws sqs delete-queue --queue-url $PORTAL_SQS_QUEUE || true
                              aws sqs delete-queue --queue-url $MANAGE_SQS_QUEUE || true
                              aws sqs delete-queue --queue-url $SETTING_SQS_QUEUE || true
                              aws sqs delete-queue --queue-url $ACK_SQS_QUEUE || true
                              aws sqs delete-queue --queue-url $INSIGHTS_SQS_QUEUE || true
                              aws cognito-idp delete-user-pool --user-pool-id $COGNITO_POOL_ID || true
                              aws lambda delete-function --function-name ${FRIENDLY_NAME}_log_parser || true
                              echo FRIENDLY_NAME="$FRIENDLY_NAME" > $WORKSPACE/var.properties
			                  
                            '''
                            script {
		def props = readProperties file: 'var.properties'
		env.FRIENDLY_NAME = props.FRIENDLY_NAME

		buildName "$FRIENDLY_NAME"
		}
                        }
            }    
              }
			  
	}
}
  }
 }
                             
